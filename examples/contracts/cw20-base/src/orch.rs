// This contains all code we needed to manually add to make it work well with cw-orch
// In the future, hopefully some of this can me auto-generated. But let's get it to work now.
use crate::contract::entry_points::{execute, instantiate, query};
use crate::contract::sv::{ContractExecMsg, ContractQueryMsg, ContractSudoMsg, InstantiateMsg};
use cw_orch::prelude::*;

// Maybe uploadable can be autogenerated?
// But this is fine to include in the client code

#[cw_orch::interface(InstantiateMsg, ContractExecMsg, ContractQueryMsg, Empty)]
pub struct Cw20Base;

impl<Chain> Uploadable for Cw20Base<Chain> {
    /// Return the path to the wasm file corresponding to the contract
    fn wasm(_chain: &ChainInfoOwned) -> WasmPath {
        artifacts_dir_from_workspace!()
            .find_wasm_path("cw20_base")
            .unwrap()
    }
    /// Returns a CosmWasm contract wrapper
    fn wrapper() -> Box<dyn MockContract<Empty>> {
        Box::new(ContractWrapper::new_with_empty(execute, instantiate, query))
    }
}

// Autogenerating these Froms caused all kinds of rust compiler issues.
// For now, I will just manually implement them to show what could work.
// The following is done in Sylvia, ideally the other (interface) variants could be added there too:
// impl From<ExecMsg> for ContractExecMsg


// Since we know the regular structure here, this may be easy enough to
// generate inside the `sv::messages` macro rather than the `contract` macro, eg.
// #[sv::messages(cw20_marketing as Marketing)]
// #[sv::messages(cw20_minting as Minting)]

impl From<cw20_allowances::sv::Cw20AllowancesExecMsg> for ContractExecMsg {
    fn from(msg: cw20_allowances::sv::Cw20AllowancesExecMsg) -> Self {
        ContractExecMsg::Allowances(msg)
    }
}

impl From<cw20_allowances::sv::Cw20AllowancesQueryMsg> for ContractQueryMsg {
    fn from(msg: cw20_allowances::sv::Cw20AllowancesQueryMsg) -> Self {
        ContractQueryMsg::Allowances(msg)
    }
}

impl From<cw20_allowances::sv::Cw20AllowancesSudoMsg> for ContractSudoMsg {
    fn from(msg: cw20_allowances::sv::Cw20AllowancesSudoMsg) -> Self {
        ContractSudoMsg::Allowances(msg)
    }
}

impl From<cw20_marketing::sv::Cw20MarketingExecMsg> for ContractExecMsg {
    fn from(msg: cw20_marketing::sv::Cw20MarketingExecMsg) -> Self {
        ContractExecMsg::Marketing(msg)
    }
}

impl From<cw20_marketing::sv::Cw20MarketingQueryMsg> for ContractQueryMsg {
    fn from(msg: cw20_marketing::sv::Cw20MarketingQueryMsg) -> Self {
        ContractQueryMsg::Marketing(msg)
    }
}

impl From<cw20_marketing::sv::Cw20MarketingSudoMsg> for ContractSudoMsg {
    fn from(msg: cw20_marketing::sv::Cw20MarketingSudoMsg) -> Self {
        ContractSudoMsg::Marketing(msg)
    }
}

impl From<cw20_minting::sv::Cw20MintingExecMsg> for ContractExecMsg {
    fn from(msg: cw20_minting::sv::Cw20MintingExecMsg) -> Self {
        ContractExecMsg::Minting(msg)
    }
}

impl From<cw20_minting::sv::Cw20MintingQueryMsg> for ContractQueryMsg {
    fn from(msg: cw20_minting::sv::Cw20MintingQueryMsg) -> Self {
        ContractQueryMsg::Minting(msg)
    }
}

impl From<cw20_minting::sv::Cw20MintingSudoMsg> for ContractSudoMsg {
    fn from(msg: cw20_minting::sv::Cw20MintingSudoMsg) -> Self {
        ContractSudoMsg::Minting(msg)
    }
}
